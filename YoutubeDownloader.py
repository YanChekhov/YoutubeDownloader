import sys
import subprocess
import os
import logging
import platform
import zipfile
import shutil
import re
import json
from datetime import datetime
from queue import Queue
import threading

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
required_packages = [
    'pyperclip',
    'yt_dlp',
    'ttkthemes',
    'pydub',
    'mutagen',
    'Pillow',
    'requests',
]

def install_packages(packages):
    for package in packages:
        try:
            __import__(package)
        except ImportError:
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞: {package}")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–≥–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    default_config = {
        "ffmpeg_path": "",
        "download_dir": "Download",
        "db_path": "downloads.db"
    }
    if not os.path.exists('config.json'):
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(default_config, f, ensure_ascii=False, indent=4)
    with open('config.json', 'r', encoding='utf-8') as f:
        return json.load(f)

config = load_config()

def get_ffmpeg_path():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ FFmpeg"""
    if config['ffmpeg_path']:
        return config['ffmpeg_path']
    else:
        return os.path.join(os.getcwd(), 'ffmpeg')

FFMPEG_PATH = get_ffmpeg_path()

install_packages(required_packages)

def check_and_install_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ FFmpeg –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    import requests
    import zipfile
    import shutil

    ffmpeg_exe = os.path.join(FFMPEG_PATH, 'ffmpeg.exe')
    if not os.path.isfile(ffmpeg_exe):
        print("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å FFmpeg...")
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å–±–æ—Ä–∫—É FFmpeg –¥–ª—è Windows
            ffmpeg_url = 'https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip'
            zip_path = os.path.join(os.getcwd(), 'ffmpeg-release-essentials.zip')
            # –°–∫–∞—á–∏–≤–∞–µ–º zip-—Ñ–∞–π–ª
            response = requests.get(ffmpeg_url, stream=True)
            with open(zip_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º zip-—Ñ–∞–π–ª
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(os.getcwd())
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –≤ FFMPEG_PATH
            extracted_dir = [d for d in os.listdir(os.getcwd()) if 'ffmpeg' in d and os.path.isdir(d)][0]
            bin_dir = os.path.join(os.getcwd(), extracted_dir, 'bin')
            if not os.path.exists(FFMPEG_PATH):
                os.makedirs(FFMPEG_PATH)
            shutil.move(os.path.join(bin_dir, 'ffmpeg.exe'), FFMPEG_PATH)
            shutil.move(os.path.join(bin_dir, 'ffprobe.exe'), FFMPEG_PATH)
            # –û—á–∏—Å—Ç–∫–∞
            shutil.rmtree(os.path.join(os.getcwd(), extracted_dir))
            os.remove(zip_path)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg: {e}")
            sys.exit(1)
    else:
        print("FFmpeg —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

check_and_install_ffmpeg()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='app.log', level=logging.ERROR,
                    format='%(asctime)s %(levelname)s:%(message)s')

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import pyperclip
import yt_dlp as youtube_dl
import re
from pydub import AudioSegment, silence
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, TIT2, TPE1, APIC, ID3NoHeaderError
from PIL import Image
from io import BytesIO
import sqlite3
import threading
from tkinter import ttk, messagebox, filedialog
import tkinter as tk
from ttkthemes import ThemedTk
import requests

class YouTubeDownloaderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("YouTube Downloader")
        self.root.geometry("+{}+{}".format(self.root.winfo_screenwidth() // 2 - 300,
                                         self.root.winfo_screenheight() // 2 - 200))
        self.root.resizable(False, False)
        self.root.attributes('-fullscreen', False)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style = ttk.Style(self.root)
        style.configure('TLabel', background='#f0f0f0')
        style.configure('TButton', background='#f0f0f0', foreground='#000000', font=('Arial', 12))
        style.configure('TCombobox', background='#ffffff', foreground='#000000', font=('Arial', 12),
                        selectbackground='#ffffff', selectforeground='#000000')
        style.map('TCombobox', fieldbackground=[('readonly', '#ffffff')],
                  background=[('readonly', '#ffffff')])

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.BASE_DIR = os.path.dirname(os.path.abspath(sys.executable)) if getattr(sys, 'frozen', False) else os.path.abspath(".")
        self.DOWNLOAD_DIR = os.path.join(self.BASE_DIR, config.get('download_dir', 'Download'))
        os.makedirs(self.DOWNLOAD_DIR, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_db()

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫
        self.download_queue = Queue()
        threading.Thread(target=self.worker, daemon=True).start()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
        try:
            self.conn = sqlite3.connect(config.get('db_path', 'downloads.db'))
            self.cursor = self.conn.cursor()
            self.cursor.execute('''CREATE TABLE IF NOT EXISTS downloads
                                   (id INTEGER PRIMARY KEY, url TEXT, type TEXT, date TIMESTAMP, status TEXT)''')
            self.conn.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        frame = tk.Frame(self.root, bg='#f0f0f0')
        frame.grid(row=0, column=0, padx=10, pady=10, columnspan=3)

        self.url_label = tk.Label(frame, width=50, font=('Arial', 12), bg='white', anchor='w',
                                  relief='sunken', text="–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å URL")
        self.url_label.grid(row=0, column=0, padx=(0, 10), pady=10, columnspan=3)
        self.url_label.bind('<Button-1>', self.handle_click)
        self.url_label.bind('<Button-3>', self.handle_click)

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        download_video_button = ttk.Button(frame, text="–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", command=self.download_video_thread)
        download_video_button.grid(row=1, column=0, pady=10, padx=5)

        download_audio_button = ttk.Button(frame, text="–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", command=self.download_audio_thread)
        download_audio_button.grid(row=1, column=1, pady=10, padx=5)

        download_audio_with_split_button = ttk.Button(frame, text="–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π",
                                                     command=self.download_audio_with_split_thread)
        download_audio_with_split_button.grid(row=1, column=2, pady=10, padx=5)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–±–æ–±–æ–∫—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        tk.Label(self.root, text="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", bg='#f0f0f0', font=('Arial', 12)).grid(row=2, column=0,
                                                                                              padx=10, pady=10,
                                                                                              sticky='e')
        self.quality_combobox = ttk.Combobox(self.root, values=[], font=('Arial', 12), state='readonly')
        self.quality_combobox.grid(row=2, column=1, padx=10, pady=10, columnspan=2, sticky='w')

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = ttk.Progressbar(self.root, orient='horizontal', mode='determinate', length=400)
        self.progress_bar.grid(row=3, column=0, columnspan=3, padx=10, pady=10)

        # –°—Ç–∞—Ç—É—Å-–ª–µ–π–±–ª
        self.status_var = tk.StringVar()
        self.status_label = tk.Label(self.root, textvariable=self.status_var, bg='#f0f0f0', font=('Arial', 12))
        self.status_label.grid(row=4, column=0, columnspan=3, pady=10)
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ª–æ–≥–∞ —Å –∏–∫–æ–Ω–∫–æ–π
        self.log_button = ttk.Button(self.root, text="üìã", command=self.toggle_log, width=2)
        self.log_button.grid(row=5, column=0, padx=10, pady=10, sticky='w')

        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –ª–æ–≥–∞
        self.status_text = tk.Text(self.root, height=10, width=60, state='disabled', wrap='word', font=('Arial', 12))
        self.status_text.grid(row=6, column=0, columnspan=3, padx=10, pady=10)
        self.status_text.grid_remove()  # –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        self.enable_text_widget_copy_paste(self.status_text)

        # –ú–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)

        history_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ò—Å—Ç–æ—Ä–∏—è", menu=history_menu)
        history_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=self.show_history)

    def handle_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–µ—Ç–∫–µ URL"""
        try:
            clipboard_content = pyperclip.paste()
            if self.is_valid_youtube_url(clipboard_content):
                self.url_label.config(text=clipboard_content)
                self.download_queue.put(('analyze', clipboard_content))
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL YouTube.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL.")

    def is_valid_youtube_url(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º YouTube-—Å—Å—ã–ª–∫–æ–π"""
        youtube_regex = re.compile(
            r'(https?://)?(www\.)?'
            r'(youtube|youtu|youtube-nocookie)\.(com|be)/'
            r'(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})')
        return youtube_regex.match(url)

    def analyze_url(self, url):
        """–ê–Ω–∞–ª–∏–∑ URL –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        self.update_status("–ê–Ω–∞–ª–∏–∑ URL...")
        try:
            ydl_opts = {}
            with youtube_dl.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=False)
                video_title = info_dict.get('title', 'video')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                uploader = info_dict.get('uploader', '')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
                tags = info_dict.get('tags', [])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏
                thumbnail_url = info_dict.get('thumbnail', '')  # URL –æ–±–ª–æ–∂–∫–∏
                formats = info_dict.get('formats', [])
                quality_options = set()
                format_map = {}
                for f in formats:
                    if f.get('vcodec') != 'none':
                        height = f.get('height')
                        if height:
                            label = f"{height}p"
                            quality_options.add(label)
                            format_map[label] = f['format_id']
                self.quality_combobox['values'] = sorted(list(quality_options), reverse=True,
                                                        key=lambda x: int(x[:-1]))
                if quality_options:
                    self.quality_combobox.current(0)
                self.quality_combobox.format_map = format_map
                self.video_info = {
                    'title': video_title,
                    'uploader': uploader,
                    'tags': ', '.join(tags),
                    'thumbnail_url': thumbnail_url
                }
            self.update_status("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ URL: {e}")
            self.update_status("–û—à–∏–±–∫–∞: " + str(e))

    def download_video(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"""
        if not self.check_ffmpeg_in_path():
            return

        url = self.url_label.cget("text")
        quality = self.quality_combobox.get()

        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ.")
            return

        if not quality or quality not in self.quality_combobox.format_map:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ.")
            return

        format_id = self.quality_combobox.format_map[quality]
        self.update_status("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")

        try:
            ydl_opts = {
                'format': f"{format_id}+bestaudio/best",
                'outtmpl': os.path.join(self.DOWNLOAD_DIR, '%(title)s_%(resolution)s.%(ext)s'),
                'ffmpeg_location': FFMPEG_PATH,
                'progress_hooks': [self.download_progress_hook],
                'merge_output_format': 'mp4',
                'socket_timeout': 60,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                'retries': 5,          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            }
            with youtube_dl.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
            self.update_status("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            self.add_to_history(url, "video", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
            self.update_status("–û—à–∏–±–∫–∞: " + str(e))
            self.add_to_history(url, "video", f"–û—à–∏–±–∫–∞: {e}")

    def download_audio(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ"""
        if not self.check_ffmpeg_in_path():
            return

        url = self.url_label.cget("text")

        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ.")
            return

        self.update_status("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")

        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': os.path.join(self.DOWNLOAD_DIR, '%(title)s.%(ext)s'),
                'ffmpeg_location': FFMPEG_PATH,
                'progress_hooks': [self.download_progress_hook],
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç mp3
                    'preferredquality': '192',  # –ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
                }],
                'socket_timeout': 60,
                'retries': 5,
                'fragment_retries': 5,
            }
            with youtube_dl.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])

            self.update_status("–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            # –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ
            audio_file = None
            for file in os.listdir(self.DOWNLOAD_DIR):
                if file.endswith('.mp3'):
                    audio_file = os.path.join(self.DOWNLOAD_DIR, file)
                    break

            if audio_file:
                self.apply_metadata(audio_file, prefill_metadata=True)
                self.add_to_history(url, "audio", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
            else:
                self.update_status("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ.")
                self.add_to_history(url, "audio", "–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∞—É–¥–∏–æ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
            self.update_status("–û—à–∏–±–∫–∞: " + str(e))
            self.add_to_history(url, "audio", f"–û—à–∏–±–∫–∞: {e}")

    def download_audio_with_split(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
        if not self.check_ffmpeg_in_path():
            return

        url = self.url_label.cget("text")

        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ.")
            return

        self.update_status("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π...")

        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': os.path.join(self.DOWNLOAD_DIR, '%(title)s.%(ext)s'),
                'ffmpeg_location': FFMPEG_PATH,
                'progress_hooks': [self.download_progress_hook],
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç mp3
                    'preferredquality': '192',  # –ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
                }],
                'socket_timeout': 60,
                'retries': 5,
                'fragment_retries': 5,
            }
            with youtube_dl.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])

            self.update_status("–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            # –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ
            audio_file = None
            for file in os.listdir(self.DOWNLOAD_DIR):
                if file.endswith('.mp3'):
                    audio_file = os.path.join(self.DOWNLOAD_DIR, file)
                    break

            if audio_file:
                self.apply_metadata(audio_file, prefill_metadata=True)
                self.add_to_history(url, "audio_split", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
                self.update_status("–†–∞–∑–±–∏–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 25 –º–∏–Ω—É—Ç...")
                self.split_audio_logically(audio_file, self.DOWNLOAD_DIR, max_duration=25*60*1000)
                self.update_status("–†–∞–∑–±–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            else:
                self.update_status("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ.")
                self.add_to_history(url, "audio_split", "–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∞—É–¥–∏–æ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π: {e}")
            self.update_status("–û—à–∏–±–∫–∞: " + str(e))
            self.add_to_history(url, "audio_split", f"–û—à–∏–±–∫–∞: {e}")

    def split_audio_logically(self, audio_path, output_dir, max_duration=25*60*1000):
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_duration –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥, —Å—Ç–∞—Ä–∞—è—Å—å –¥–µ–ª–∞—Ç—å —ç—Ç–æ –Ω–∞ –ø–∞—É–∑–∞—Ö.
        :param audio_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É.
        :param output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π.
        :param max_duration: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
        """
        try:
            audio = AudioSegment.from_file(audio_path)
            silence_thresh = audio.dBFS - 16  # –ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã
            min_silence_len = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–∏—à–∏–Ω—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

            # –ù–∞—Ö–æ–¥–∏–º –ø–∞—É–∑—ã –≤ –∞—É–¥–∏–æ
            silent_ranges = silence.detect_silence(audio, min_silence_len=min_silence_len, silence_thresh=silence_thresh)
            silent_ranges = [(start, end) for start, end in silent_ranges]

            segments = []
            start_idx = 0

            for silent_start, silent_end in silent_ranges:
                if silent_start - start_idx >= max_duration:
                    # –ù–∞–π–¥–µ–Ω–∞ –ø–∞—É–∑–∞, –ø–æ–¥—Ö–æ–¥—è—â–∞—è –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
                    segments.append((start_idx, silent_start))
                    start_idx = silent_end

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
            if start_idx < len(audio):
                segments.append((start_idx, len(audio)))

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            base_name = os.path.basename(audio_path)
            name_without_ext = os.path.splitext(base_name)[0]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            for i, (start, end) in enumerate(segments):
                segment = audio[start:end]
                output_path = os.path.join(output_dir, f"{name_without_ext}{i+1}.mp3")
                segment.export(output_path, format="mp3")
                self.update_status(f"–ß–∞—Å—Ç—å {i+1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
                self.apply_metadata(output_path, prefill_metadata=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ –∞—É–¥–∏–æ: {e}")
            self.update_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ –∞—É–¥–∏–æ: " + str(e))

    def apply_metadata(self, audio_path, prefill_metadata=False):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
        :param audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
        :param prefill_metadata: –ï—Å–ª–∏ True, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–∑ video_info.
        """
        def set_metadata():
            author = author_var.get().strip()
            tag = tag_var.get().strip()
            cover_path = cover_var.get()

            if not author or not tag:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ò–º—è –∞–≤—Ç–æ—Ä–∞ –∏ –ì–ª–∞–≤–Ω—ã–π —Ç–µ–≥).")
                return

            try:
                audio = MP3(audio_path, ID3=ID3)
            except ID3NoHeaderError:
                audio = MP3(audio_path)
                audio.add_tags()

            audio_tags = audio.tags

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            audio_tags.add(TPE1(encoding=3, text=author))  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            audio_tags.add(TIT2(encoding=3, text=tag))     # –ù–∞–∑–≤–∞–Ω–∏–µ

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
            if cover_path:
                try:
                    if cover_path.startswith('http://') or cover_path.startswith('https://'):
                        response = requests.get(cover_path)
                        if response.status_code == 200:
                            img_data = response.content
                        else:
                            img_data = None
                    else:
                        with open(cover_path, 'rb') as img_file:
                            img_data = img_file.read()

                    if img_data:
                        mime_type = 'image/jpeg' if cover_path.lower().endswith(('.jpg', '.jpeg')) else 'image/png'
                        audio_tags.add(
                            APIC(
                                encoding=3,         # 3 - utf-8
                                mime=mime_type,     # –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                type=3,             # –¢–∏–ø –æ–±–ª–æ–∂–∫–∏ (3 - –æ–±–ª–æ–∂–∫–∞ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è)
                                desc='Cover',
                                data=img_data
                            )
                        )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
                    self.update_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")

            audio.save()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ {os.path.basename(audio_path)}.")
            metadata_window.destroy()

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata_window = tk.Toplevel(self.root)
        metadata_window.title("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
        metadata_window.geometry("400x400")
        metadata_window.grab_set()  # –î–µ–ª–∞–µ—Ç –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if prefill_metadata and hasattr(self, 'video_info'):
            prefill_author = self.video_info.get('uploader', '')
            prefill_tag = self.video_info.get('tags', '')
            prefill_cover = self.video_info.get('thumbnail_url', '')
        else:
            prefill_author = ""
            prefill_tag = ""
            prefill_cover = ""

        tk.Label(metadata_window, text="–ò–º—è –∞–≤—Ç–æ—Ä–∞:", font=('Arial', 12)).pack(pady=10)
        author_var = tk.StringVar(value=prefill_author)
        author_entry = ttk.Entry(metadata_window, textvariable=author_var, width=50)
        author_entry.pack(pady=5)

        tk.Label(metadata_window, text="–ì–ª–∞–≤–Ω—ã–π —Ç–µ–≥:", font=('Arial', 12)).pack(pady=10)
        tag_var = tk.StringVar(value=prefill_tag)
        tag_entry = ttk.Entry(metadata_window, textvariable=tag_var, width=50)
        tag_entry.pack(pady=5)

        tk.Label(metadata_window, text="–û–±–ª–æ–∂–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", font=('Arial', 12)).pack(pady=10)
        cover_var = tk.StringVar()
        cover_entry = ttk.Entry(metadata_window, textvariable=cover_var, width=50, state='readonly')
        cover_entry.pack(pady=5, padx=10, fill='x')

        def browse_cover():
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–æ–∂–∫—É",
                filetypes=[("Image Files", "*.jpg *.jpeg *.png")]
            )
            if file_path:
                cover_var.set(file_path)

        browse_button = ttk.Button(metadata_window, text="–í—ã–±—Ä–∞—Ç—å –æ–±–ª–æ–∂–∫—É", command=browse_cover)
        browse_button.pack(pady=5)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –æ–±–ª–æ–∂–∫–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
        if prefill_metadata and prefill_cover:
            try:
                response = requests.get(prefill_cover)
                if response.status_code == 200:
                    img = Image.open(BytesIO(response.content))
                    temp_cover_path = os.path.join(self.DOWNLOAD_DIR, 'temp_cover.jpg')
                    img.save(temp_cover_path)
                    cover_var.set(temp_cover_path)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏: {e}")
                self.update_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏: {e}")

        apply_button = ttk.Button(metadata_window, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=set_metadata)
        apply_button.pack(pady=20)

    def check_ffmpeg_in_path(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏"""
        ffmpeg_exe = os.path.join(FFMPEG_PATH, 'ffmpeg.exe')
        if not os.path.isfile(ffmpeg_exe):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {ffmpeg_exe}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FFmpeg.")
            return False
        os.environ["PATH"] += os.pathsep + FFMPEG_PATH
        return True

    def download_progress_hook(self, d):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if d['status'] == 'downloading':
            total_bytes = d.get('total_bytes') or d.get('total_bytes_estimate')
            if total_bytes:
                progress = d['downloaded_bytes'] / total_bytes * 100
                self.progress_bar['value'] = progress
                speed = d.get('_speed_str', 'N/A')
                eta = d.get('_eta_str', 'N/A')
                # –£–¥–∞–ª—è–µ–º ANSI escape-–∫–æ–¥—ã
                speed_clean = self.remove_ansi_escape_sequences(speed)
                eta_clean = self.remove_ansi_escape_sequences(eta)
                status_message = f"–ó–∞–≥—Ä—É–∑–∫–∞... {progress:.2f}% –°–∫–æ—Ä–æ—Å—Ç—å: {speed_clean} ETA: {eta_clean}"
                self.update_status(status_message)
                self.root.update_idletasks()
        elif d['status'] == 'finished':
            self.progress_bar['value'] = 100
            self.update_status("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

    def remove_ansi_escape_sequences(self, text):
        """–£–¥–∞–ª–µ–Ω–∏–µ ANSI escape-–∫–æ–¥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        ansi_escape = re.compile(r'\x1B[@-_][0-?]*[ -/]*[@-~]')
        return ansi_escape.sub('', text)

    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ª–æ–≥–∞"""
        self.status_var.set(message)
        self.status_text.config(state='normal')
        self.status_text.insert(tk.END, message + '\n')
        self.status_text.config(state='disabled')
        self.status_text.see(tk.END)
        self.root.update_idletasks()

    def toggle_log(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –ª–æ–≥"""
        if self.status_text.winfo_viewable():
            self.status_text.grid_remove()
        else:
            self.status_text.grid()

    def enable_text_widget_copy_paste(self, text_widget):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        def copy(event=None):
            text_widget.event_generate("<<Copy>>")
            return "break"

        def select_all(event=None):
            text_widget.tag_add("sel", "1.0", "end")
            return "break"

        text_widget.bind("<Control-c>", copy)
        text_widget.bind("<Control-a>", select_all)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        def show_context_menu(event):
            context_menu.tk_popup(event.x_root, event.y_root)
            return "break"

        context_menu = tk.Menu(text_widget, tearoff=0)
        context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=lambda: text_widget.event_generate("<<Copy>>"))
        context_menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", command=lambda: text_widget.event_generate("<<SelectAll>>"))

        text_widget.bind("<Button-3>", show_context_menu)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏

    def add_to_history(self, url, type_, status):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫"""
        try:
            self.cursor.execute("INSERT INTO downloads (url, type, date, status) VALUES (?, ?, ?, ?)",
                                (url, type_, datetime.now(), status))
            self.conn.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

    def show_history(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
        try:
            self.cursor.execute("SELECT * FROM downloads ORDER BY date DESC")
            records = self.cursor.fetchall()

            history_window = tk.Toplevel(self.root)
            history_window.title("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫")
            history_window.geometry("600x400")

            columns = ('ID', 'URL', '–¢–∏–ø', '–î–∞—Ç–∞', '–°—Ç–∞—Ç—É—Å')
            tree = ttk.Treeview(history_window, columns=columns, show='headings')
            for col in columns:
                tree.heading(col, text=col)
                tree.column(col, width=100, anchor='center')

            for record in records:
                tree.insert('', tk.END, values=record)

            tree.pack(expand=True, fill='both')

            scrollbar = ttk.Scrollbar(history_window, orient=tk.VERTICAL, command=tree.yview)
            tree.configure(yscroll=scrollbar.set)
            scrollbar.pack(side='right', fill='y')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫.")

    def worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫"""
        while True:
            task = self.download_queue.get()
            if task[0] == 'analyze':
                self.analyze_url(task[1])
            elif task[0] == 'download_video':
                self.download_video()
            elif task[0] == 'download_audio':
                self.download_audio()
            elif task[0] == 'download_audio_with_split':
                self.download_audio_with_split()
            self.download_queue.task_done()

    def download_video_thread(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.download_queue.put(('download_video',))

    def download_audio_thread(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.download_queue.put(('download_audio',))

    def download_audio_with_split_thread(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.download_queue.put(('download_audio_with_split',))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

if __name__ == '__main__':
    try:
        root = ThemedTk(theme="arc")
        app = YouTubeDownloaderApp(root)
        app.run()
    except Exception as e:
        logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
